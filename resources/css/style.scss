////
/// Block stylesheet.
///
/// @author Justin Tadlock <justintadlock@gmail.com>
/// @link   https://github.com/x3p0-dev/x3p0-progress
////

/// One ginormous container class to rule over everything. This is actually the
/// outer wrapper for the block itself.
.wp-block-x3p0-progress {

	// Set up some default custom properties.  Theme authors can overrule
	// these via `settings.custom.x3p0Progress.{name}` in their `theme.json`
	// files. Alternatively, use `settings.custom.x3p0-progress.{name}`.
	// Don't blame me for the crazy hyphens. That's all on WP for
	// hyphenating numbers + letters instead of by letter case.  Regardless,
	// I'm fixing it in the actual CSS here so that it's somewhat readable,
	// so feel free to use the sane versions if you need to target things
	// via CSS.
	--x3p0-progress--height: var( --wp--custom--x-3-p-0-progress--height, 1.5rem );

	// The gap property here is between the `<label>` and `<progress>`
	// elements. For vertical, the default is a bit smaller. For horizontal,
	// we widen it out a bit.
	--x3p0-progress--gap: var( --wp--custom--x-3-p-0-progress--gap, 0.5rem 2rem );

	// Note that these two properties are attached to the block's `style`
	// attribute when a user customizes them.  We must do this because
	// styling the `<progress>` element requires targeting pseudo-elements
	// for various browsers.
	--x3p0-progress--color: var( --wp--custom--x-3-p-0-progress--color, #0284c7 );
	--x3p0-progress--background: var( --wp--custom--x-3-p-0-progress--background, #f0f9ff );

	// Custom box shadow.  Themes can register a custom shadow using our
	// `custom.x3p0Progress.shadow`, but we'll also allow `custom.shadow`
	// because the Pixl theme has already set a precedent with this method.
	--x3p0-progress--shadow: var(
		--wp--custom--x-3-p-0-progress--shadow,
		var( --wp--custom--shadow, none )
	);

	// Gradient backgrounds default to their color counterparts because we
	// set the `background` property by default instead of `background-color`.
	// There's probably a better way to handle this. Leaving for now.
	--x3p0-progress--gradient: var( --x3p0-progress--color );
	--x3p0-progress--background-gradient: var( --x3p0-progress--background );

	// Styles for the `<label>` element.  This element houses both the label
	// text and "completion" number, both of which can be show together,
	// individually, or not at all.
	&__label {
		display: flex;
		flex-wrap: nowrap;
		// Add a gap of a single character to replicate a natural space.
		gap: 1ch;
	}

	// Wrapper `<div>` for the `<progress>` element. The extra wrapper
	// gives us more flexibility for custom styles.  Also, the user-supplied
	// border (or `theme.json`-supplied) is added to this element instead of
	// the block wrapper.
	&__container {
		box-sizing: border-box;
		width: 100%;
		overflow: hidden;
		box-shadow: var( --x3p0-progress--shadow );

		// On small screens, we force this to be full width. For horizontal
		// layouts in particular, we force a wrap, so we need to adjust
		// the width. See later rules for `.is-horizontal`.
		@media ( max-width: 480px ) {
			width: 100% !important;
		}
	}

	// Handling for the `<progress>` element. It's probably best not to muck
	// around with most of these values. Fire, smoke, and dragons lie ahead.
	// I've already walked through the fire and smoke to eventually slay the
	// beast at the end.  But, hey, if there's a better cross-browser way of
	// handling this, let me know.
	&__bar {
		// Kill browsers' default handling for this.
		-webkit-appearance: none;
		   -moz-appearance: none;
		        appearance: none;

		// Finally getting to the actual fun part of the CSS for our
		// beloved `<progress>` element.  *Maybe.*
		display: block;
		overflow: hidden;
		width: 100%;
		height: var( --x3p0-progress--height );
		background: var( --x3p0-progress--background-gradient );
		border-radius: inherit;

		// Remove border from Firefox that's left over, despite setting
		// the above `appearance` property.
		border: none;

		// Possibly works in IE for the foreground color. Not bothering
		// to actually check this because I value my sanity too much to
		// ever install IE again.
		color: var( --x3p0-progress--color );

		// This is the background pseudo element for webkit browsers.
		// We're actually going to kill this since Firefox doesn't have
		// an equivalent pseudo-element. Instead, it lets the `<progress>`
		// element itself take this role. The easiest solution is to
		// treat all browsers the same in this regard (i.e., use the
		// method employed by Firefox).
		&::-webkit-progress-bar {
			background: transparent;
			border-radius: inherit;
		}

		// This is the foreground pseudo element for webkit browsers.
		// Note that this must be kept separate from the following
		// code for `::moz-progress-bar`.  Otherwise, it breaks in Edge,
		// leaving the value at the default green color.
		&::-webkit-progress-value {
			height: 100%;
			display: block;
			background: var( --x3p0-progress--gradient );

			// Webkit browsers do not seem to properly inherit the
			// border radius.  Mostly, this is an issue with the
			// rightmost edge of the value bar, which will always be
			// square/straight unless we give it a specific radius.
			// We do control that a bit when the progress is 100%
			// with `overflow: hidden` on the `<progress>` element.
			// So, maybe this will work in the future. ðŸ¤·...
			border-radius: inherit;
		}

		// Foreground pseudo element for Firefox.
		&::-moz-progress-bar {
			height: 100%;
			display: block;
			background: var( --x3p0-progress--gradient );

			// Firefox does inherit the border radius. ðŸ¥³
			border-radius: inherit;
		}
	}

	// =====================================================================
	// Layout styles.
	// =====================================================================

	// Sets the gap between the `<label>` and `<progress>` elements.  We
	// need the extra call to `.editor-styles-wrapper` to overrule the
	// default flex styles in the editor.
	&.is-layout-flex,
	.editor-styles-wrapper &.is-layout-flex {
		gap: var( --x3p0-progress--gap );
	}

	// Vertical layout.
	&.is-vertical {

		// The progress container should always default to full-width
		// for vertical layouts. Users can overrule this via the width
		// control in the block inspector.
		.wp-block-x3p0-progress__container {
			width: 100%;
		}
	}

	// Horizontal layout.
	&.is-horizontal {

		// Overrule `nowrap` on small screens, allowing the label and
		// progress element to span individual lines.
		@media ( max-width: 480px ) {
			flex-wrap: wrap !important;
		}

		// Remove the flex from the `<label>` element on horizontal
		// layouts. I did this for a very good reason.  I just can't
		// seem to remember what that reason was while I leave this
		// comment in the code. But, I am 100% positive that removing
		// this will cause the world to end.  Well, at least horizontal
		// layouts to go horribly wrong.
		.wp-block-x3p0-progress__label {
			flex: none;
		}

		// Align label content to the right when entire block is aligned
		// right.  Yeah, this should definitely happen.
		&.is-content-justification-right .wp-block-x3p0-progress__label {
			justify-content: flex-end;
		}
	}

	// Reversed layout. So, we're kind of piggybacking a bit on top of
	// WordPress' built-in flex layout type. No need to reinvent the wheel,
	// right?  Of course, WordPress doesn't support `column-reverse` or
	// `row-reverse` in its current layout system.  The block allows users
	// to toggle this on and off.  All this does is flip the order of the
	// `<label>` and `<progress>` element, at least visually. In reality,
	// the markup stays the same.  Basically, we need to overwrite some core
	// defaults for any "reversed" layout so that they, you know, actually
	// look like they've switched order.
	&.is-reversed {
		// Use some `!important` magic to overrule whatever it is that
		// WordPress thinks should happen.
		flex-direction: column-reverse !important;
	}

	// Reversed + horizontal layout.
	&.is-reversed.is-horizontal {
		// More `!important` magic. Gotta make sure our styles win this
		// crazy slugfest for superiority.
		flex-direction: row-reverse !important;

		// For reversed, horizontal layouts, we need to set the horizontal
		// margin (depending on the justification) for either the label or
		// progress container.
		&.is-content-justification-right .wp-block-x3p0-progress__container {
			margin-left: auto;
		}

		&.is-content-justification-left  .wp-block-x3p0-progress__label {
			margin-right: auto;
		}
	}

	// =====================================================================
	// Custom block styles.
	// =====================================================================

	// Hand-drawn style.
	&.is-style-hand-drawn {
		// We don't want to overwrite the full shadow for this style.
		// We just want to overwrite the default while still allowing
		// theme styles to rule.
		--x3p0-progress--shadow: var(
			--wp--custom--x-3-p-0-progress--color,
			var(
				--wp--custom--shadow,
				0 1px 3px 0 rgba( 0, 0, 0, 0.1 ),
		                        0 1px 2px 0 rgba( 0, 0, 0, 0.06 )
			)
		);

		.wp-block-x3p0-progress__container {
			border: 2px solid var( --x3p0-progress--color );
			border-radius: 255px 15px 225px 15px/15px 225px 15px 255px !important;
		}

		.wp-block-x3p0-progress__bar {
			&::-webkit-progress-value {
				border-radius: 255px 15px 225px 15px/15px 225px 15px 255px !important;
			}

			&::-moz-progress-bar {
				border-radius: 255px 15px 225px 15px/15px 225px 15px 255px !important;
			}
		}
	}
}
